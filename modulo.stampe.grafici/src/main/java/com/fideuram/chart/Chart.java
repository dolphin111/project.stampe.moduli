package com.fideuram.chart;

import com.fideuram.chart.configuration.Configurazione;
import com.fideuram.costanti.Systems;
import com.fideuram.utils.LoggingUtils;
import com.fideuram.utils.Streamer;
import com.fideuram.config.CrmProperties;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.data.time.Month;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * Created by
 * User: logan
 * Date: 22/05/12
 * Time: 14.26
 */
public class Chart {
    protected static String temporaryDirecotry;
    protected String fileName;
    protected Double xminimo;
    protected Double xmassimo;
    protected Configurazione configurazione;

    public Chart() {
      setTemporaryDirecotry();
    }
    
    protected Paint getPaint(){
        return new Color(255,255,255);
    }

    protected Paint getGradientPaint(){
        return new GradientPaint(0,0,Color.white,1000,0,Color.gray);
    }

    protected String getAutoGeneratedFileName(){
        if(null==fileName)
            fileName= String.valueOf(new Date().getTime());
         return fileName;
    }

    public byte[] getFile(String destfile) throws IOException {
        return Streamer.getFile(temporaryDirecotry + destfile + ".png");
    }

    public byte[] getFile(String path, String destfile) throws IOException {
        return Streamer.getFile(path + destfile + ".png");
    }
    
    protected String setTemporaryDirecotry(){
        if(temporaryDirecotry==null)
            temporaryDirecotry= CrmProperties.getProperty(Systems.TEMPORARY_DIRECTORY);
        return temporaryDirecotry;
    }

    protected void applyChartTheme(JFreeChart chart, int fontSize) {
        final StandardChartTheme chartTheme = (StandardChartTheme)org.jfree.chart.StandardChartTheme.createJFreeTheme();

        //final Font font = new Font("Liberation Serif", Font.PLAIN, fontSize);
        final Font font = new Font("Arial", Font.PLAIN, fontSize);

        chartTheme.setExtraLargeFont(font);
        chartTheme.setLargeFont(font);
        chartTheme.setRegularFont(font);
        chartTheme.setSmallFont(font);

        chartTheme.apply(chart);
    }

    protected void applyChartTheme(JFreeChart chart) {
        final StandardChartTheme chartTheme = (StandardChartTheme)org.jfree.chart.StandardChartTheme.createJFreeTheme();

        // The default font used by JFreeChart unable to render Chinese properly.
        // We need to provide font which is able to support Chinese rendering.
        /* if (Locale.getDefault().getLanguage().equals(Locale.SIMPLIFIED_CHINESE.getLanguage())) {
        final Font oldExtraLargeFont = chartTheme.getExtraLargeFont();
        final Font oldLargeFont = chartTheme.getLargeFont();
        final Font oldRegularFont = chartTheme.getRegularFont();
        final Font oldSmallFont = chartTheme.getSmallFont();

        final Font extraLargeFont = new Font("Sans-serif", oldExtraLargeFont.getStyle(), oldExtraLargeFont.getSize());
        final Font largeFont = new Font("Sans-serif", oldLargeFont.getStyle(), oldLargeFont.getSize());
        final Font regularFont = new Font("Sans-serif", oldRegularFont.getStyle(), oldRegularFont.getSize());
        final Font smallFont = new Font("Sans-serif", oldSmallFont.getStyle(), oldSmallFont.getSize());

        chartTheme.setExtraLargeFont(extraLargeFont);
        chartTheme.setLargeFont(largeFont);
        chartTheme.setRegularFont(regularFont);
        chartTheme.setSmallFont(smallFont);
    }else {   */
        final Font font = new Font("Liberation Serif", Font.PLAIN, 10);
        //final Font font = new Font("Lucida Sans Unicode", Font.PLAIN, 14);
        //final Font font = new Font("Arial", Font.PLAIN, 12);
        final Color color=new Color(0,0,0);

        chartTheme.setExtraLargeFont(font);
        chartTheme.setLargeFont(font);
        chartTheme.setRegularFont(font);
        chartTheme.setSmallFont(font);

        chartTheme.setAxisLabelPaint(color);
        chartTheme.setLegendItemPaint(color);
        chartTheme.setItemLabelPaint(color);
        // }

        chartTheme.apply(chart);
    }

    /**
     *
     * @param chart
     * @param filename
     * @param x  pixel
     * @param y  pixel
     * @throws IOException
     */
    public void saveChart(JFreeChart chart, String path, String filename, int x, int y) throws IOException {
        if(path!=null&&!path.trim().equals(""))
            ChartUtilities.saveChartAsPNG(new File(path + filename + ".png"), chart, x, y);
        else
            ChartUtilities.saveChartAsPNG(new File(temporaryDirecotry + filename + ".png"), chart, x, y);
    }

    protected void configureMargini(Configurazione configurazione){
        if(xmassimo == 0)
            xmassimo = 0.10;

        double massimo= (xmassimo*configurazione.getPercentualeUpDowngridRange()/100);

        if(massimo<0)
            massimo=1;
        else if(massimo>0&&massimo<1)
            massimo=0.25;

        xmassimo=xmassimo + massimo;
        xminimo= xminimo  - massimo;


        LoggingUtils.debug("range minimo"+xminimo);
        LoggingUtils.debug("range massimo"+xmassimo);
    }


    protected void fixBaseToZero(){
        if(xmassimo<0)
            xmassimo=0.0;
        //if(xminimo>0)       //questo l'ho tolto per via del ticket...NON ME LO HANNO ANCORA ASSEGNATP
        //    xminimo=0.0;
    }


}

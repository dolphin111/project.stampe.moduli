package com.fideuram.chart.grafici.linea;

import com.fideuram.chart.Chart;
import com.fideuram.chart.configuration.Colore;
import com.fideuram.chart.configuration.Configurazione;
import com.fideuram.chart.grafici.linea.bean.Linea;
import com.fideuram.chart.grafici.linea.bean.Punto;
import com.fideuram.utils.LoggingUtils;
import com.fideuram.utils.Streamer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.*;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;


import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created with
 * User: logan
 * Date: 11/07/13
 * Time: 10.43
 */
public class LineaMonthSemplice extends Chart {
    TimeSeries series;


    public LineaMonthSemplice() {
        super();
    }

    public byte[] generate(Linea linea) throws IOException {
        series = new TimeSeries(linea.getHeader(), Day.class);
        setDataset(linea);
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                linea.getHeader(),
                linea.getXaxis(),
                linea.getYaxis(),
                dataset,
                linea.getConfigurazione().isLegenda(),         // Show legend
                linea.getConfigurazione().isTooltip(),         // tooltips?
                false);
        if(linea.getConfigurazione().isCurvedLine())
             chart.getXYPlot().setRenderer(new XYSplineRenderer());

        XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(linea.getConfigurazione().getBackColor().getColor());
        plot.setRangeGridlinePaint(linea.getConfigurazione().getGridColor().getColor());


        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setRange(xminimo, xmassimo);

        XYItemRenderer r = plot.getRenderer();
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
        renderer.setSeriesPaint(0, linea.getColore().getColor());


        if(linea.getConfigurazione().isFontObliquo()){
            DateAxis xaxis = (DateAxis) plot.getDomainAxis();

               /*DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                // create three different sets of TickUnits for the three ranges (day, week, month)
                // JFreeChart will select the smallest unit that doesn't overlap labels.
                TickUnits tickUnits = new TickUnits();
                tickUnits.add(new DateTickUnit(DateTickUnitType.MONTH, 1, new SimpleDateFormat("MMM")));
                tickUnits.add(new DateTickUnit(DateTickUnitType.DAY, 7, dateFormat));
                tickUnits.add(new DateTickUnit(DateTickUnitType.DAY, 1, dateFormat));
                xaxis.setStandardTickUnits(tickUnits);

                xaxis.setAutoRange(true);
                xaxis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);*/
            xaxis.setVerticalTickLabels(true);
        }

        String s = temporaryDirecotry + getAutoGeneratedFileName() + ".png";
        saveChart(chart, temporaryDirecotry, getAutoGeneratedFileName(), linea.getConfigurazione().getxPixelDimension(), linea.getConfigurazione().getyPixelDimension());

        byte[] stream = Streamer.getFile(s);
        new File(s).delete();
        return stream;

    }

    private  void setDataset(Linea linea){
        ArrayList<Punto> punti = (ArrayList<Punto>) linea.getPunti();
        for(int i=0; i<punti.size();i++){
            Punto p =  punti.get(i);
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(p.getData());
            series.add(new Day(calendar.getTime()),p.getValore());
            if(i==0){
                xminimo=p.getValore();
                xmassimo=p.getValore();
            }else{
                if(p.getValore()<xminimo){
                    xminimo=p.getValore();
                }else if(p.getValore()>xmassimo){
                    xmassimo=p.getValore();
                }
            }
        }

        configureMargini(linea.getConfigurazione());
    }



    public static void main(String args[]) throws Exception {
         Configurazione configurazione=new Configurazione();
         configurazione.setBackColor(new Colore(255,255,255));
         configurazione.setGridColor(new Colore(0, 0, 0));
         configurazione.setFontObliquo(true);
         configurazione.setCurvedLine(true);
         configurazione.setPercentualeUpDowngridRange(45);
         Linea l = new Linea();
         l.setConfigurazione(configurazione);
         l.setHeader("Header");
         l.setYaxis("");
         l.setXaxis("");
         l.setColore(new Colore(34,34,34));
         l.addPunto(new Punto(new GregorianCalendar(2003,01,01).getTime(), new Double(-0.50)));
         l.addPunto(new Punto(new GregorianCalendar(2013,01,01).getTime(), new Double(-0.50)));
         l.addPunto(new Punto(new GregorianCalendar(2013,02,01).getTime(), new Double(1.80)));
         l.addPunto(new Punto(new GregorianCalendar(2013,03,01).getTime(), new Double(0.20)));
         l.addPunto(new Punto(new GregorianCalendar(2013,04,01).getTime(), new Double(0.10)));
         l.addPunto(new Punto(new GregorianCalendar(2013,05,01).getTime(), new Double(3.00)));
         l.addPunto(new Punto(new GregorianCalendar().getTime(), new Double(2.65)));

         byte[] grafico= new LineaMonthSemplice().generate(l);
         Streamer.saveToFile(grafico,"C:/Stampe/out/tmp/","curva.png");
    }
}
